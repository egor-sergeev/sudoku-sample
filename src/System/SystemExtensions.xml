<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemExtensions</name>
    </assembly>
    <members>
        <member name="T:System.Algorithms">
            <summary>
            Provides all algorithm processing methods.
            </summary>
        </member>
        <member name="M:System.Algorithms.Sort``1(``0[],)">
            <summary>
            Sort the specified array by quick sort.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="comparer">The method to compare two elements.</param>
            <remarks>
            If you want to use this method, please note that the <typeparamref name="T"/>
            may not be the built-in types such as <see cref="T:System.Int32"/>, <see cref="T:System.Single"/> or so on,
            because they can use operators directly.
            </remarks>
        </member>
        <member name="M:System.Algorithms.GetSubsets``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Get all subsets that each element is chosen at most once.
            Note that the null set <c>{ }</c> doesn't belong to the result.
            </summary>
            <param name="this">The array of elements.</param>
            <returns>
            The subsets of the list. For example, if the input array is <c>{ 1, 2, 3 }</c>, the output
            should be as follows:
            <list type="table">
            <item><c>{ 1 }</c></item>
            <item><c>{ 2 }</c></item>
            <item><c>{ 3 }</c></item>
            <item><c>{ 1, 2 }</c></item>
            <item><c>{ 1, 3 }</c></item>
            <item><c>{ 2, 3 }</c></item>
            <item><c>{ 1, 2, 3 }</c></item>
            </list>
            7 cases (without null set) in total.
            </returns>
        </member>
        <member name="M:System.Algorithms.GetSubsets``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>
            The subsets of the list. For example, if the input array is <c>{ 1, 2, 3 }</c> and
            the argument <paramref name="count"/> is 2, the output should be as follows:
            <list type="table">
            <item><c>{ 1, 2 }</c>,</item>
            <item><c>{ 1, 3 }</c>,</item>
            <item><c>{ 2, 3 }</c></item>
            </list>
            3 cases in total.
            </returns>
        </member>
        <member name="M:System.Algorithms.GetExtractedCombinations(System.Int32[][])">
            <summary>
            Get all combinations that each sub-array only choose one.
            </summary>
            <param name="this">The jigsaw array.</param>
            <returns>
            All combinations that each sub-array choose one. For example, if the array is
            <c>{ { 1, 2, 3 }, { 1, 3 }, { 1, 4, 7, 10 } }</c>, all combinations are:
            <list type="table">
            <item><c>{ 1, 1, 1 }</c>, <c>{ 1, 1, 4 }</c>, <c>{ 1, 1, 7 }</c>, <c>{ 1, 1, 10 }</c>,</item>
            <item><c>{ 1, 3, 1 }</c>, <c>{ 1, 3, 4 }</c>, <c>{ 1, 3, 7 }</c>, <c>{ 1, 3, 10 }</c>,</item>
            <item><c>{ 2, 1, 1 }</c>, <c>{ 2, 1, 4 }</c>, <c>{ 2, 1, 7 }</c>, <c>{ 2, 1, 10 }</c>,</item>
            <item><c>{ 2, 3, 1 }</c>, <c>{ 2, 3, 4 }</c>, <c>{ 2, 3, 7 }</c>, <c>{ 2, 3, 10 }</c>,</item>
            <item><c>{ 3, 1, 1 }</c>, <c>{ 3, 1, 4 }</c>, <c>{ 3, 1, 7 }</c>, <c>{ 3, 1, 10 }</c>,</item>
            <item><c>{ 3, 3, 1 }</c>, <c>{ 3, 3, 4 }</c>, <c>{ 3, 3, 7 }</c>, <c>{ 3, 3, 10 }</c></item>
            </list>
            24 cases in total.
            </returns>
            <remarks>
            Please note that each return values unit (an array) contains the same number of elements
            with the whole array.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.NotifyChangedList`1">
            <summary>
            Encapsulates the list that notifies the users while adding an element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.NotifyChangedList`1._innerList">
            <summary>
            Indicates the inner list.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.NotifyChangedList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.NotifyChangedList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.NotifyChangedList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="E:System.Collections.Generic.NotifyChangedList`1.ElementAdded">
            <summary>
            Indicates the event triggers when the element is added.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.NotifyChangedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.Set`1">
            <summary>
            Indicates a set which contains the different elements.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.Set`1._list">
            <summary>
            The inner list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Set`1.#ctor">
            <inheritdoc cref="T:Sudoku.DocComments.DefaultConstructor"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a series of elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:System.Collections.Generic.Set`1.Count">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Set`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Set`1.Item(`0)">
            <summary>
            Get the first element that is equal to the specified parameter.
            </summary>
            <param name="element">The element.</param>
            <returns>The first element to satisfy the condition.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Sort">
            <summary>
            Sort the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Sort(System.Comparison{`0})">
            <summary>
            Sort the list with the specified comparison.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Add(`0)">
            <summary>
            Add an element into the set.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Collections.Generic.Set`1.TryGetValue(`0,`0@)">
            <summary>
            Get the instance in the collection that is same (or similar) as another one
            specified as the parameter.
            </summary>
            <param name="other">The value to compare.</param>
            <param name="result">(<see langword="out"/> parameter) The result.</param>
            <returns>Indicates whether the searching is successful.</returns>
            <remarks>
            Note that <paramref name="other"/> and <paramref name="result"/> aren't totally same.
            The comparison is decided by the implementation of its <c>Equals</c> method.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Remove">
            <summary>
            Remove the last element out of the list.
            </summary>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.RemoveAt(System.Index@)">
            <summary>
            Remove the element at the specified index.
            </summary>
            <param name="index">(<see langword="in"/> parameter) The index.</param>
            <returns>The element removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Equals(System.Collections.Generic.Set{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.InternalEquals(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <summary>
            The internal equality determination.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.SetEquals(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <summary>
            Determine whether two <see cref="T:System.Collections.Generic.Set`1"/>s contain the same elements.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Equality(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Inequality(System.Collections.Generic.Set{`0},System.Collections.Generic.Set{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_BitwiseAnd(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The intersection result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_BitwiseOr(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The union result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.UnionWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_ExclusiveOr(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The symmetric exception result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.Set`1.op_Subtraction(System.Collections.Generic.Set{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calls the method <see cref="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})"/>, and returns the
            reference of the <paramref name="left"/> parameter.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The exception result.</returns>
            <seealso cref="M:System.Collections.Generic.Set`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="T:System.Collections.Generic.TreeNode`1">
            <summary>
            Encapsulates a tree node.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Id">
            <summary>
            Indicates the current ID.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.ParentId">
            <summary>
            Indicates the parent ID of this instance.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.IsLeaf">
            <summary>
            Indicates whether the current node is the left node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Content">
            <summary>
            Indicates the content.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.TreeNode`1.Children">
            <summary>
            Indicates its children nodes.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.Equals(System.Collections.Generic.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.CompareTo(System.Collections.Generic.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.InternalCompare(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <summary>
            The internal comparison.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_Equality(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_Inequality(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_GreaterThan(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_GreaterThan(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_GreaterThanOrEqual(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_GreaterThanOrEqual(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_LessThan(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_LessThan(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Collections.Generic.TreeNode`1.op_LessThanOrEqual(System.Collections.Generic.TreeNode{`0},System.Collections.Generic.TreeNode{`0})">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_LessThanOrEqual(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ClosedAttribute">
            <summary>
            Marks on a enumeration type, which means the enumeration type is a closed enumeration type.
            </summary>
            <remarks>
            A closed enumeration type is a type that only holds the value in the enumeration declaration field
            (i.e. the curly bracket). For example, the code
            <code>
            [Closed] public enum Gender { Boy; Girl; }
            </code>
            Which means the type <c>Gender</c> is a closed enumeration type, and you can't use arithmetic operators
            (such as <c>operator +</c>) to get the fields that don't appear
            in the declaration <c>{ Boy; Girl; }</c> (e.g. <c>Gender.Boy + Gender.Girl</c>,
            <c>Gender.Boy + 1</c>, etc.). In other words, you can only use those fields as the references
            instead of any calculations.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisableParameterlessConstructorAttribute">
            <summary>
            Marks on a <see langword="struct"/>, to tell the users the parameterless constructor is disabled
            and can't be called or used.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisableParameterlessConstructorAttribute.#ctor">
            <inheritdoc cref="T:Sudoku.DocComments.DefaultConstructor"/>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisableParameterlessConstructorAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified recommend member name.
            </summary>
            <param name="recommendMemberName">The recommend member name.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DisableParameterlessConstructorAttribute.RecommendMemberName">
            <summary>
            Indicates the recommend member name.
            </summary>
            <remarks>
            This property holds the value that tells users which member they should use and replace with.
            </remarks>
        </member>
        <member name="T:System.Extensions.BitArrayEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <seealso cref="T:System.Collections.BitArray"/>
        </member>
        <member name="M:System.Extensions.BitArrayEx.GetCardinality(System.Collections.BitArray)">
            <summary>
            Get the cardinality of the specified <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The array.</param>
            <returns>The total number of bits set <see langword="true"/>.</returns>
        </member>
        <member name="T:System.Extensions.BitOperationsEx">
            <summary>
            Provides extension methods on <see cref="T:System.Numerics.BitOperations"/>.
            </summary>
            <seealso cref="T:System.Numerics.BitOperations"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SkipSetBit(System.Byte,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SkipSetBit(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SkipSetBit(System.Int16,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SkipSetBit(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SkipSetBit(System.Int32,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SkipSetBit(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SkipSetBit(System.Int64,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SkipSetBit(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetNextSet(System.Byte,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetNextSet(System.Int16,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetNextSet(System.Int32,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetNextSet(System.Int64,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetNextSet(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SetAt(System.Byte,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SetAt(System.Int16,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SetAt(System.Int32,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.SetAt(System.Int64,System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.SetAt(Sudoku.DocComments.Integer,System.Int32)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetAllSets(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetAllSets(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetAllSets(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetAllSets(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetAllSets(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetEnumerator(System.Byte)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetEnumerator(System.Int16)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetEnumerator(System.Int32)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.GetEnumerator(System.Int64)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.GetEnumerator(Sudoku.DocComments.Integer)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.ReverseBits(System.Byte@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.ReverseBits(System.Int16@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.ReverseBits(System.Int32@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="M:System.Extensions.BitOperationsEx.ReverseBits(System.Int64@)">
            <inheritdoc cref="M:Sudoku.DocComments.Integer.ReverseBits(Sudoku.DocComments.Integer@)"/>
        </member>
        <member name="T:System.Extensions.CloneableEx">
            <summary>
            Provides extension methods on <see cref="T:System.ICloneable"/>.
            </summary>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:System.Extensions.CloneableEx.TryCloneAs``1(System.ICloneable)">
            <summary>
            Clone this object and try to cast to the specified type.
            If the type is invalid to cast, the return value will be <see langword="null"/>.
            </summary>
            <typeparam name="TClass">
            The type to cast. The type should be a <see langword="class"/> because the type
            to implement <see cref="T:System.ICloneable"/> should be a reference type.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>
            The cast result. If cast is valid, the value will be so valid; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.Extensions.CloneableEx.CloneAs``1(System.ICloneable)">
            <summary>
            Clone this object and cast to the specified type no matter how.
            </summary>
            <typeparam name="TClass">
            The type to cast. The type should be a <see langword="class"/> because the type
            to implement <see cref="T:System.ICloneable"/> should be a reference type.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>The cast result.</returns>
        </member>
        <member name="M:System.Extensions.CloneableEx.Cast``1(System.ICloneable)">
            <summary>
            Try to cast the current instance to the generic cloneable type <see cref="T:System.ICloneable`1"/>.
            </summary>
            <typeparam name="TClass">The type of the instance.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The object.</param>
            <returns>The cast result. If cast is invalid, the return value will be <see langword="null"/>.</returns>
            <seealso cref="T:System.ICloneable`1"/>
        </member>
        <member name="T:System.Extensions.CollectionEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
        </member>
        <member name="M:System.Extensions.CollectionEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The collection.</param>
            <param name="values">
            The values you want to add to the end of the collection.
            </param>
        </member>
        <member name="M:System.Extensions.CollectionEx.AddIfDoesNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/> when
            the specified list doesn't contain the specified element.
            </summary>
            <typeparam name="T">The type of all elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:System.Extensions.DictionaryEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.Dictionary`2"/>
        </member>
        <member name="M:System.Extensions.DictionaryEx.ToArray``3(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts the specified dictionary to an array, if each value can be iterated.
            </summary>
            <typeparam name="TKey">The type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of each value.</typeparam>
            <typeparam name="T">
            The iterator type, which means the iteration type for the <typeparamref name="TValue"/>
            instances.
            </typeparam>
            <param name="this">(<see langword="this"/> parameter) The dictionary.</param>
            <returns>The result array.</returns>
        </member>
        <member name="M:System.Extensions.DictionaryEx.TryAddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Try to add a series of elements into the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The dictionary.</param>
            <param name="list">The list to add into the dictionary.</param>
            <returns>The number of elements that is successful to add.</returns>
        </member>
        <member name="T:System.Extensions.DoubleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Double"/>.
            </summary>
            <seealso cref="T:System.Double"/>
        </member>
        <member name="M:System.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Extensions.DoubleEx.NearlyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:System.Extensions.EnumerableEx">
            <summary>
            Provides a set of static methods for querying objects that implement
            <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>This class has the same function and status with <see cref="T:System.Linq.Enumerable"/>.</remarks>
            <seealso cref="T:System.Collections.IEnumerable"/>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:System.Extensions.EnumerableEx.HasOnlyOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the specified list has only one element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:System.Extensions.EnumerableEx.Contains``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Check whether the list contains the element that is in the specified array.
            </summary>
            <typeparam name="T">The type of the element to check.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="elements">
            (<see langword="params"/> parameter) The array that contains the target elements.
            </param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Extensions.EnumerableEx.ContainsType``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether the collection contains any elements that match the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Extensions.EnumerableEx.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Get the index of the whole list, whose corresponding element is satisfy the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="predicate">The condition to check.</param>
            <returns>
            The index of the element satisfied the condition. If the list can't find that element,
            return -1 as the result.
            </returns>
        </member>
        <member name="T:System.Extensions.EnumEx">
            <summary>
            Provides extension methods on <see cref="T:System.Enum"/>.
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:System.Extensions.EnumEx.Min``1(``0,``0)">
            <summary>
            Check which enumeration field is less.
            </summary>
            <typeparam name="TEnum">The type of the enumeration field to compare.</typeparam>
            <param name="left">The left one.</param>
            <param name="right">The right one.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:System.Extensions.EnumEx.Max``1(``0,``0)">
            <summary>
            Check which enumeration field is greater.
            </summary>
            <typeparam name="TEnum">The type of the enumeration field to compare.</typeparam>
            <param name="left">The left one.</param>
            <param name="right">The right one.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:System.Extensions.EnumEx.GetAllFlags``1(``0)">
            <summary>
            To get all possible flags from a specified enumeration instance.
            </summary>
            <typeparam name="TEnum">The type of that enumeration.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The field.</param>
            <returns>
            All flags. If the enumeration field doesn't contain any flags,
            the return value will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.Extensions.EnumEx.GetEnumerator``1(``0)">
            <summary>
            Get all possible flags that the current enumeration field set.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The current enumeration type instance.</param>
            <returns>All flags.</returns>
        </member>
        <member name="M:System.Extensions.EnumEx.Flags``1(``0,``0)">
            <inheritdoc cref="M:System.Enum.HasFlag(System.Enum)"/>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The current enumeration type instance.</param>
            <param name="other">The other instance to check.</param>
            <exception cref="T:System.ArgumentException">Throws when the used bytes aren't 1, 2 or 4.</exception>
            <remarks>
            This method is same as <see cref="M:System.Enum.HasFlag(System.Enum)"/>, but without boxing and unboxing operations.
            </remarks>
            <seealso cref="M:System.Enum.HasFlag(System.Enum)"/>
        </member>
        <member name="M:System.Extensions.EnumEx.MultiFlags``1(``0,``0)">
            <summary>
            Determines whether the instance has the flags specified as <paramref name="flags"/>.
            </summary>
            <typeparam name="TEnum">The type of the enumeration field.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="flags">All flags used.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Extensions.FormatProviderEx">
            <summary>
            Provides extension methods on <see cref="T:System.IFormatProvider"/>.
            </summary>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:System.Extensions.FormatProviderEx.HasFormatted``1(System.IFormatProvider,``0,System.String,System.String@)">
            <summary>
            To check whether the format provider has defined the format rule.
            If the rule is defined, this method will return the string representation
            according to the format rule.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The format provider.</param>
            <param name="obj">The object.</param>
            <param name="format">The format string.</param>
            <param name="result">
            (<see langword="out"/> parameter) The result. If the format has been defined,
            this value won't be <see langword="null"/>.
            </param>
            <returns>The <see cref="T:System.Boolean"/> value indicating that.</returns>
            <remarks>
            You should use this as:
            <code>
            if (formatProvider.HasFormatted(this, format, out string? result)) return result;
            </code>
            </remarks>
        </member>
        <member name="T:System.Extensions.IndexEx">
            <summary>
            Provides extension methods on <see cref="T:System.Index"/>.
            </summary>
            <seealso cref="T:System.Index"/>
        </member>
        <member name="M:System.Extensions.IndexEx.Deconstruct(System.Index@,System.Boolean@,System.Int32@)">
            <inheritdoc cref="T:Sudoku.DocComments.DeconstructMethod"/>
            <param name="this">(<see langword="this in"/> parameter) The index.</param>
            <param name="isFromEnd">
            (<see langword="out"/> parameter) Indicates whether the current index is from end.
            </param>
            <param name="value">(<see langword="out"/> parameter) Indicates the value.</param>
        </member>
        <member name="T:System.Extensions.ListEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:System.Extensions.ListEx.RemoveDuplicateItems``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove duplicate items in the specified list.
            </summary>
            <typeparam name="T">The type of each elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>Returns the reference of the argument <paramref name="this"/>.</returns>
        </member>
        <member name="M:System.Extensions.ListEx.RemoveDuplicateItems``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove duplicate items in the specified list.
            </summary>
            <typeparam name="T">The type of each elements.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>Returns the reference of the argument <paramref name="this"/>.</returns>
        </member>
        <member name="M:System.Extensions.ListEx.RemoveLastElement``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last element of the specified list, which is equivalent to code:
            <code>
            list.RemoveAt(list.Count - 1);
            </code>
            or
            <code>
            list.RemoveAt(^1); // Call extension method 'RemoveAt'.
            </code>
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <seealso cref="M:System.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index@)"/>
        </member>
        <member name="M:System.Extensions.ListEx.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index@)">
            <summary>
            Remove at the element in the specified index.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="index">(<see langword="in"/> parameter) The index to remove.</param>
        </member>
        <member name="M:System.Extensions.ListEx.AsReadOnlyList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Try to convert the current list to a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            Throws when the specified list is neither <see cref="T:System.Collections.Generic.List`1"/> nor <typeparamref name="T"/>[].
            </exception>
        </member>
        <member name="T:System.Extensions.MathEx">
            <summary>
            Provides extension methods on <see cref="T:System.Math"/>.
            </summary>
            <seealso cref="T:System.Math"/>
        </member>
        <member name="M:System.Extensions.MathEx.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the minimal one of three values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="c">The third value.</param>
            <returns>Which is the most minimal one.</returns>
        </member>
        <member name="T:System.Extensions.MemberInfoEx">
            <summary>
            Provides extension methods on <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:System.Extensions.MemberInfoEx.IsDefined``1(System.Reflection.MemberInfo)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member.
            </summary>
            <typeparam name="TAttribute">The type of that attribute.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The member information instance.</param>
            <returns>
            <see langword="true"/> if an attribute of the specified type is applied to <paramref name="this"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:System.Extensions.Pointer">
            <summary>
            Provides methods on pointers.
            </summary>
            <remarks>
            Different with other types, pointers can't be as <see langword="this"/> parameter.
            </remarks>
        </member>
        <member name="M:System.Extensions.Pointer.Swap``1(``0*,``0*)">
            <summary>
            To swap the two variables using pointers when the pointee is an <see langword="unmanaged"/> type.
            </summary>
            <typeparam name="TUnmanaged">The type of the variable.</typeparam>
            <param name="left">The left variable.</param>
            <param name="right">The right variable.</param>
        </member>
        <member name="M:System.Extensions.Pointer.StringLengthOf(System.Char*)">
            <summary>
            Get the length of the specified string which is represented by a <see cref="T:System.Char"/>*.
            </summary>
            <param name="ptr">The pointer.</param>
            <returns>The total length.</returns>
            <remarks>
            In C#, this function is unsafe because the implementation of
            <see cref="T:System.String"/> types between C and C# is totally different.
            In C, <see cref="T:System.String"/> is like a <see cref="T:System.Char"/>* or a
            <see cref="T:System.Char"/>[], they ends with the terminator symbol <c>'\0'</c>.
            However, C# not.
            </remarks>
        </member>
        <member name="M:System.Extensions.Pointer.GetArrayFromStart``1(``0*,System.Int32,System.Int32)">
            <summary>
            Get the new array from the pointer, with the specified start index.
            </summary>
            <typeparam name="TUnmanaged">
            The type of the pointer element. Note that the type should be <see langword="unmanaged"/>
            in order to use pointer handling. Therefore, <see langword="managed"/> types shouldn't be allowed.
            </typeparam>
            <param name="ptr">The pointer.</param>
            <param name="length">The length of the array that pointer points to.</param>
            <param name="index">The start index that you want to pick from.</param>
            <returns>The array of elements.</returns>
            <remarks>
            For example, the pointer is the address of the first element in an array <c>{ 0, 1, 3, 6, 10 }</c>,
            if parameter <paramref name="index"/> is 2, the return array will be <c>{ 3, 6, 10 }</c>. Note that
            the parameter <paramref name="length"/> should keep the value 5 because the array contains
            5 elements in this case.
            </remarks>
        </member>
        <member name="M:System.Extensions.Pointer.GetArrayFromStart(System.Int32*,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the new array from the pointer, with the specified start index.
            </summary>
            <param name="ptr">The pointer.</param>
            <param name="length">The length of the array that pointer points to.</param>
            <param name="index">The start index that you want to pick from.</param>
            <param name="removeTrailingZeros">
            Indicates whether the method will remove the trailing zeros. If <see langword="false"/>,
            the method will be same as <see cref="M:System.Extensions.Pointer.GetArrayFromStart``1(``0*,System.Int32,System.Int32)"/>.
            </param>
            <returns>The array of elements.</returns>
            <remarks>
            For example, the pointer is the address of the first element in an array <c>{ 0, 1, 3, 6, 10 }</c>,
            if parameter <paramref name="index"/> is 2, the return array will be <c>{ 3, 6, 10 }</c>. Note that
            the parameter <paramref name="length"/> should keep the value 5 because the array contains
            5 elements in this case.
            </remarks>
            <seealso cref="M:System.Extensions.Pointer.GetArrayFromStart``1(``0*,System.Int32,System.Int32)"/>
        </member>
        <member name="T:System.Extensions.ReadOnlyListEx">
            <summary>
            Provides extension methods on <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1"/>
        </member>
        <member name="M:System.Extensions.ReadOnlyListEx.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            Returns the list that is in the range specified as two parameters called
            <paramref name="start"/> and <paramref name="end"/>.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>The list of the elements that is in the specified range.</returns>
        </member>
        <member name="M:System.Extensions.ReadOnlyListEx.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Range@)">
            <summary>
            Returns the list that is in the range specified as a <see cref="T:System.Range"/> instance.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="range">(<see langword="in"/> parameter) The range.</param>
            <returns>The list of the elements that is in the specified range.</returns>
        </member>
        <member name="M:System.Extensions.ReadOnlyListEx.FindIndexOf``1(System.Collections.Generic.IReadOnlyList{``0},System.Predicate{``0})">
            <summary>
            Find the index of an element that satisfy the specified condition.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="predicate">The condition.</param>
            <returns>
            The result index of that element. If the list doesn't contain any element to satisfy the condition,
            the method will return -1 as the result.
            </returns>
        </member>
        <member name="T:System.Extensions.ReadOnlySpanEx">
            <summary>
            Provides extension methods on <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <seealso cref="T:System.ReadOnlySpan`1"/>
        </member>
        <member name="M:System.Extensions.ReadOnlySpanEx.Select``2(System.ReadOnlySpan{``0}@,System.Func{``0,``1})">
            <summary>
            The select method used in <see langword="from"/>-<see langword="in"/>-<see langword="select"/>
            clause.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="this">(<see langword="this in"/> parameter) The list.</param>
            <param name="selector">The selector that is used for conversion.</param>
            <returns>The array of target result elements.</returns>
            <example>
            For example:
            <code>
            <see langword="int"/>[] selection = <see langword="from"/> digit <see langword="in"/> 17.GetAllSets() <see langword="select"/> digit + 1;
            </code>
            </example>
        </member>
        <member name="M:System.Extensions.ReadOnlySpanEx.GetSubsets``1(System.ReadOnlySpan{``0}@,System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>All subsets.</returns>
        </member>
        <member name="T:System.Extensions.SingleEx">
            <summary>
            Provides extension methods on <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:System.Single"/>
        </member>
        <member name="M:System.Extensions.SingleEx.NearlyEquals(System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Extensions.SingleEx.NearlyEquals(System.Single,System.Single,System.Single)">
            <summary>
            Indicates whether the specified value is nearly equals to the current value.
            If the differ of two values to compare is lower than the specified epsilon value,
            the method will return <see langword="true"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value.</param>
            <param name="other">The other value to compare.</param>
            <param name="epsilon">The epsilon value (the minimal differ).</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:System.Extensions.SpanEx">
            <summary>
            Provides extension methods on <see cref="T:System.Span`1"/>.
            </summary>
            <seealso cref="T:System.Span`1"/>
        </member>
        <member name="M:System.Extensions.SpanEx.Select``2(System.Span{``0}@,System.Func{``0,``1})">
            <summary>
            The select method used in <see langword="from"/>-<see langword="in"/>-<see langword="select"/>
            clause.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="this">(<see langword="this in"/> parameter) The list.</param>
            <param name="selector">The selector that is used for conversion.</param>
            <returns>The array of target result elements.</returns>
            <example>
            For example:
            <code>
            <see langword="int"/>[] selection = <see langword="from"/> digit <see langword="in"/> 17.GetAllSets() <see langword="select"/> digit + 1;
            </code>
            </example>
        </member>
        <member name="M:System.Extensions.SpanEx.GetSubsets``1(System.Span{``0}@,System.Int32)">
            <summary>
            Get all subsets from the specified number of the values to take.
            </summary>
            <param name="this">(<see langword="this in"/> parameter) The array.</param>
            <param name="count">The number of elements you want to take.</param>
            <returns>All subsets.</returns>
        </member>
        <member name="T:System.Extensions.StringBuilderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <seealso cref="T:System.Text.StringBuilder"/>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse all characters in a specified string builder instance.
            </summary>
            <param name="this">
            (<see langword="this"/> parameter) The instance to reverse all characters.
            </param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Remove the specified number of characters from the end of the string builder
            instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance to remove characters.</param>
            <param name="length">The number of characters you want to remove.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendLine(System.Text.StringBuilder,System.Char)">
            <summary>
            Append a character to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="value">The character you want to append.</param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            The extension method is used in order to avoid implicit conversion from
            <see cref="T:System.Char"/> to <see cref="T:System.Int32"/>. If you want to append everything,
            please use the method <see cref="M:System.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)"/>.
            </remarks>
            <seealso cref="P:System.Environment.NewLine"/>
            <seealso cref="M:System.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)"/>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendLine``1(System.Text.StringBuilder,``0)">
            <summary>
            Append a <see cref="T:System.String"/> representation of an object
            to the end of the specified string builder instance,
            and then append a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <typeparam name="T">The type of the instance to add.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="obj">
            The <see cref="T:System.String"/> representation of an object you want to append.
            </param>
            <returns>The reference of the current instance.</returns>
            <remarks>
            This method can solve the problem of boxing and unboxing.
            </remarks>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendLines(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append several lines into the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="lines">The lines you want to add.</param>
            <returns>The reference of the parameter <paramref name="this"/>.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.NullableAppend(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>; otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.NullableAppendLine(System.Text.StringBuilder,System.String)">
            <summary>
            Append the text into the tail of the <see cref="T:System.Text.StringBuilder"/> object if
            the text is not <see langword="null"/>, and then add a terminator at the tail;
            otherwise, do nothing.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string builder.</param>
            <param name="text">The text to add.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation.
            This method allows you defining a custom converter to convert the specified value into
            a string to be appended.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <param name="converter">The converter method specified as a function pointer.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Text.StringBuilder})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.Text.StringBuilder"/> representation.
            This method allows you defining a custom converter to convert the specified value into
            a string to be appended.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <param name="converter">The converter method specified as a function pointer.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendLineRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation,
            and then append a new line as a separator. This method allows you defining a custom converter
            to convert the specified value into a string to be appended.
            </summary>
            <typeparam name="TElement">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <param name="converter">The converter method specified as a function pointer.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.AppendLineRange``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a series of elements, and convert them to a <see cref="T:System.String"/> representation, and then
            append a new line as a separator.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The list.</param>
            <param name="contentList">All contents.</param>
            <returns>The reference of the current instance.</returns>
        </member>
        <member name="M:System.Extensions.StringBuilderEx.CopyTo(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Copy the specified string builder to the specified target.
            </summary>
            <param name="this">The base string builder.</param>
            <param name="to">The target builder.</param>
            <exception cref="T:System.ArgumentException">
            Throws if the target instance doesn't have enough space to store all characters
            from the base one.
            </exception>
        </member>
        <member name="T:System.Extensions.StringEx">
            <summary>
            Provides extension methods on <see cref="T:System.String"/>.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="F:System.Extensions.StringEx.NullLinesOrHeaderSpaces">
            <summary>
            Indicates the regular expression to match all null lines and header spaces in their lines.
            </summary>
        </member>
        <member name="F:System.Extensions.StringEx.MatchingTimeSpan">
            <summary>
            Indicates the time span that is used for matching.
            </summary>
        </member>
        <member name="M:System.Extensions.StringEx.SatisfyPattern(System.String,System.String)">
            <summary>
            Check whether the specified string instance is satisfied
            the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating that.</returns>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Extensions.StringEx.IsMatch(System.String,System.String)">
            <summary>
            Check whether the specified string instance can match the value
            using the specified regular expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Extensions.StringEx.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of
            the specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The value after matching. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>.
            </remarks>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
        </member>
        <member name="M:System.Extensions.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The matched string value. If failed to match,
            the value will be <see langword="null"/>.
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.Extensions.StringEx.MatchAll(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)"/>
        </member>
        <member name="M:System.Extensions.StringEx.MatchAll(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a
            specified regular expression pattern, using the specified matching
            options.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to match.</param>
            <param name="pattern">The regular expression pattern.</param>
            <param name="regexOption">The matching options.</param>
            <returns>
            The result after matching. If failed to match,
            the returning array will be an empty string array (has no elements).
            </returns>
            <remarks>
            This method is a syntactic sugar of the calling
            method <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>.
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the specified <paramref name="pattern"/> is not an valid regular
            expression pattern.
            </exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>
        </member>
        <member name="M:System.Extensions.StringEx.Reserve(System.String,System.String)">
            <summary>
            Reserve all characters that satisfy the specified pattern.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <param name="reservePattern">
            The pattern that reserved characters satisfied. All supported patterns are:
            <list type="table">
            <item>
            <term><c>@"\d"</c></term>
            <description>To match a digit.</description>
            </item>
            <item>
            <term><c>@"\t"</c></term>
            <description>To match a tab.</description>
            </item>
            <item>
            <term><c>@"\w"</c></term>
            <description>To match a letter, digit or underscore character <c>'_'</c>.</description>
            </item>
            </list>
            </param>
            <returns>The result string.</returns>
            <remarks>
            For example, if code is <c>"Hello, world!".Reserve(@"\w")</c>, the return value
            won't contain any punctuation marks (i.e. <c>"Helloworld"</c>).
            </remarks>
            <exception cref="T:System.Text.RegularExpressions.InvalidRegexStringException">
            Throws when the <paramref name="reservePattern"/> is invalid (Please expand the description
            of the parameter <paramref name="reservePattern"/> to learn about all valid patterns).
            </exception>
        </member>
        <member name="M:System.Extensions.StringEx.IsRegexPattern(System.String)">
            <summary>
            To check if the current string value is a valid regular
            expression pattern or not.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The value to check.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating that.</returns>
        </member>
        <member name="M:System.Extensions.StringEx.TrimVerbatim(System.String)">
            <summary>
            Trim all spaces when they started a new line, or null lines.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The trimmed result.</returns>
            <remarks>
            Note that all null lines and header spaces are removed.
            </remarks>
        </member>
        <member name="M:System.Extensions.StringEx.TrimEndNewLine(System.String)">
            <summary>
            Trim new-line characters from the tail of the string.
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Extensions.StringEx.SplitByNewLine(System.String)">
            <summary>
            Split the string with the fixed characters (new line).
            </summary>
            <param name="this">(<see langword="this"/> parameter) The string.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:System.Extensions.TypeEx">
            <summary>
            Provides extension method on <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:System.Extensions.TypeEx.IsSubclassOf``1(System.Type)">
            <summary>
            Determine whether the type is the subclass of the specified one.
            </summary>
            <typeparam name="TClass">The specified type to check.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The type to check.</param>
            <returns>The <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="T:System.Extensions.Utf8JsonReaderEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
            <seealso cref="T:System.Text.Json.Utf8JsonReader"/>
        </member>
        <member name="M:System.Extensions.Utf8JsonReaderEx.ReadObject``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.Serialization.JsonConverter{``0},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Try to read an object.
            </summary>
            <typeparam name="T">The object to read.</typeparam>
            <param name="this">(<see langword="this ref"/> parameter) The reader instance.</param>
            <param name="converter">The converter to convert the value.</param>
            <param name="type">The type to convert.</param>
            <param name="options">The options on deserialization.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:System.Extensions.Utf8JsonWriterEx">
            <summary>
            Provides extension methods on <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <seealso cref="T:System.Text.Json.Utf8JsonWriter"/>
        </member>
        <member name="M:System.Extensions.Utf8JsonWriterEx.WriteObject``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.Serialization.JsonConverter{``0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Try to write an object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="value">The value to serialize.</param>
            <param name="converter">The converter.</param>
            <param name="options">The options on serialization.</param>
        </member>
        <member name="M:System.Extensions.Utf8JsonWriterEx.WriteObjects``1(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IEnumerable{``0},System.Text.Json.Serialization.JsonConverter{``0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Try to write a series of objects.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="this">(<see langword="this"/> parameter) The instance.</param>
            <param name="values">Values to serialize.</param>
            <param name="converter">The converter.</param>
            <param name="options">The options on serialization.</param>
        </member>
        <member name="T:System.IO.DirectoryEx">
            <summary>
            The directory extensions.
            </summary>
        </member>
        <member name="M:System.IO.DirectoryEx.CreateIfDoesNotExist(System.String)">
            <summary>
            Create the specified directory path when the path doesn't exist.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:System.IO.DirectoryEx.DeleteWhenNoFilesInIt(System.String)">
            <summary>
            Delete the directory when the current directory doesn't contain any files.
            </summary>
            <param name="path">The path.</param>
            <returns>The <see cref="T:System.Boolean"/> result indicating whether the deletion is successful.</returns>
        </member>
        <member name="T:System.ICloneable`1">
            <inheritdoc cref="T:System.ICloneable"/>
            <typeparam name="T">
            The type of this instance. This type should be only a class because the cloning
            operation is needed only in reference types, while the value types will be passed
            by value, at this time all value members (fields and properties) will be copied
            one by one.
            </typeparam>
            <remarks>
            Different with <see cref="T:System.ICloneable"/>, the cloneation
            has the same type with this existing instance.
            </remarks>
            <seealso cref="T:System.ICloneable"/>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:System.ICloneable`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.IValueComparable`1">
            <inheritdoc cref="T:System.IComparable`1"/>
            <typeparam name="TStruct">
            The type of objects to compare. Here it should be a <see langword="struct"/>.
            </typeparam>
        </member>
        <member name="M:System.IValueComparable`1.CompareTo(`0@)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">(<see langword="in"/> parameter) An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The
            return value has these meanings: Value Meaning Less than zero This instance precedes
            other in the sort order. Zero This instance occurs in the same position in the
            sort order as other. Greater than zero This instance follows other in the sort
            order.
            </returns>
        </member>
        <member name="M:System.IValueComparable`1.System#IComparable{TStruct}#CompareTo(`0)">
            <inheritdoc/>
        </member>
        <member name="T:System.IValueEquatable`1">
            <inheritdoc cref="T:System.IEquatable`1"/>
            <typeparam name="TStruct">
            The type of objects to compare. Here it should be a <see langword="struct"/>.
            </typeparam>
        </member>
        <member name="M:System.IValueEquatable`1.Equals(`0@)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">(<see langword="in"/> parameter) An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.IValueEquatable`1.System#IEquatable{TStruct}#Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.RegularExpressions.InvalidRegexStringException">
            <summary>
            Indicates an error for reporting a string is an invalid regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance with the message and the regular expression.
            </summary>
            <param name="message">The message.</param>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.RegularExpressions.InvalidRegexStringException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes an instance with the message, wrong regular expression and the inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="regex">The regular expression.</param>
            <param name="innerException">The inner expression.</param>
        </member>
        <member name="P:System.Text.RegularExpressions.InvalidRegexStringException.WrongRegexString">
            <summary>
            Indicates the wrong regex string.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.InvalidRegexStringException.Message">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.ValueStringBuilder">
            <summary>
            Encapsulates a string builder implementation that is used via a <see langword="struct"/>.
            </summary>
            <remarks>
            You shouldn't use the parameterless constructor <see cref="M:System.Text.ValueStringBuilder.#ctor"/>.
            </remarks>
            <example>
            You can use this struct like this:
            <code>
            var sb = new ValueStringBuilder(stackalloc char[100]);
            
            // Appending operations...
            sb.Append("Hello");
            sb.Append(',');
            sb.Append("World");
            sb.Append('!');
            
            Console.WriteLine(sb.ToString()); // Dispose method will be called here.
            </code>
            </example>
            <seealso cref="M:System.Text.ValueStringBuilder.#ctor"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.CopyTo(System.Text.ValueStringBuilder@)">
            <summary>
            Try to copy the current instance to the specified builder.
            </summary>
            <param name="builder">(<see langword="ref"/> parameter) The builder.</param>
            <exception cref="T:System.ArgumentException">
            Throws when the target argument doesn't contain the enough space.
            </exception>
        </member>
        <member name="M:System.Text.ValueStringBuilder.CopyTo(System.Text.StringBuilder)">
            <summary>
            Try to copy the current instance to the specified builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="F:System.Text.ValueStringBuilder._chunk">
            <summary>
            Indicates the inner character series that is created by <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <seealso cref="T:System.Buffers.ArrayPool`1"/>
        </member>
        <member name="F:System.Text.ValueStringBuilder._chars">
            <summary>
            INdicates the character pool.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified string as the basic buffer.
            </summary>
            <param name="s">The string value.</param>
            <remarks>
            This constructor should be used when you know the maximum length of the return string. In addition,
            the string shouldn't be too long; below 300 (approximately) is okay.
            </remarks>
        </member>
        <member name="M:System.Text.ValueStringBuilder.#ctor(System.Span{System.Char}@)">
            <summary>
            Initializes an instance with the buffer specified as a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="buffer">(<see langword="in"/> parameter) The initial buffer.</param>
            <remarks>
            <para>
            For the buffer, you can use the nested <see langword="stackalloc"/> expression to create
            a serial of buffer, such as <c>stackalloc char[10]</c>, where the length 10 is the value
            that holds the approximate maximum number of characters when output from your evaluation.
            </para>
            <para>
            You can also use the constructor: <see cref="M:System.Text.ValueStringBuilder.#ctor(System.Int32)"/> like:
            <code>
            var sb = new ValueStringBuilder(10);
            </code>
            The code is nearly equivalent to
            <code>
            var sb = new ValueStringBuilder(stackalloc char[10]);
            </code>
            but uses shared array pool (i.e. the property <see cref="P:System.Buffers.ArrayPool`1.Shared"/>)
            to create the buffer rather than using <see cref="T:System.Span`1"/>.
            </para>
            </remarks>
            <seealso cref="T:System.Span`1"/>
            <seealso cref="M:System.Text.ValueStringBuilder.#ctor(System.Int32)"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.#ctor(System.Int32)">
            <summary>
            Initializes an instance with the specified capacity.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:System.Text.ValueStringBuilder.Length">
            <summary>
            Indicates the length of the string builder.
            </summary>
        </member>
        <member name="P:System.Text.ValueStringBuilder.Capacity">
            <summary>
            Indicates the total capacity.
            </summary>
        </member>
        <member name="P:System.Text.ValueStringBuilder.Item(System.Int32)">
            <summary>
            Gets the reference of a character at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference of the character.</returns>
            <remarks>
            This property returns a <see langword="ref"/> <see cref="T:System.Char"/>, which
            means you can use the return value to re-assign a new value.
            </remarks>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Equals(System.Text.ValueStringBuilder@)">
            <summary>
            Determines whether the current instance has same values with the other instance.
            </summary>
            <param name="other">(<see langword="in"/> parameter) The other instance.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.ToString">
            <summary>
            Returns the string result that is combined and constructed from the current instance.
            </summary>
            <returns>The string representation.</returns>
            <remarks>
            <para>
            The dispose method will be called during this method executed.
            Therefore, in C# 8, even if we can use the syntax
            <code>
            using var sb = new ValueStringBuilder(stackalloc char[10]);
            </code>
            we won't use the keyword <see langword="using"/> before object creation expression.
            </para>
            <para>
            So, you can't or don't need to:
            <list type="bullet">
            <item>Use the keyword <see langword="using"/> before object creation expression.</item>
            <item>Use the instance of this type after called this method.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.ValueStringBuilder.op_Equality(System.Text.ValueStringBuilder,System.Text.ValueStringBuilder)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Equality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.op_Inequality(System.Text.ValueStringBuilder,System.Text.ValueStringBuilder)">
            <inheritdoc cref="M:Sudoku.DocComments.Operators.op_Inequality(Sudoku.DocComments.Operators,Sudoku.DocComments.Operators)"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Dispose">
            <summary>
            To dispose the collection, all fields and properties will be cleared. In other words,
            this method is nearly equivalent to the code <c>this = default;</c>.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Dispose(System.Boolean)">
            <summary>
            To dispose the collection. Although this method is <see langword="public"/>,
            you may not call this method, because this method will be called automatically when
            the method <see cref="M:System.Text.ValueStringBuilder.ToString"/> is called.
            </summary>
            <param name="clearAll">Indicates whether we should return the buffer.</param>
            <seealso cref="M:System.Text.ValueStringBuilder.ToString"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.EnsureCapacity(System.Int32)">
            <summary>
            To ensure the capacity in order to append characters into this collection.
            </summary>
            <param name="capacity">The capacity value to ensure.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Grow(System.Int32)">
            <summary>
            Resize the internal buffer either by doubling current buffer size or
            by adding <paramref name="additionalCapacityBeyondPos"/> to
            <see cref="P:System.Text.ValueStringBuilder.Length"/> whichever is greater.
            </summary>
            <param name="additionalCapacityBeyondPos">Number of chars requested beyond current position.</param>
            <seealso cref="P:System.Text.ValueStringBuilder.Length"/>
        </member>
        <member name="T:System.Text.ValueStringBuilder.Enumerator">
            <summary>
            Encapsulates the enumerator of this collection.
            </summary>
        </member>
        <member name="F:System.Text.ValueStringBuilder.Enumerator._length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="F:System.Text.ValueStringBuilder.Enumerator._index">
            <summary>
            Indicates whether 
            </summary>
        </member>
        <member name="F:System.Text.ValueStringBuilder.Enumerator._ptr">
            <summary>
            Indicates the pointer that points to the current character.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Enumerator.#ctor(System.Text.ValueStringBuilder@)">
            <summary>
            Initializes an instance with the specified character list specified as a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="chars">The characters.</param>
            <seealso cref="T:System.Span`1"/>
        </member>
        <member name="P:System.Text.ValueStringBuilder.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Enumerator.MoveNext">
            <inheritdoc cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference">
            <summary>
            <para>
            Get a pinnable reference to the builder.
            Does not ensure there is a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/>.
            </para>
            <para>
            This overload is pattern matched in the C# 7.3+ compiler so you can omit
            the explicit method call, and write eg <c>fixed (char* c = builder)</c>.
            </para>
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference(System.Boolean)">
            <summary>
            Get a pinnable reference to the builder.
            </summary>
            <param name="withTerminate">
            Ensures that the builder has a null character after <see cref="P:System.Text.ValueStringBuilder.Length"/>.
            </param>
            <seealso cref="P:System.Text.ValueStringBuilder.Length"/>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Insert(System.Int32,System.Char,System.Int32)">
            <summary>
            Inserts a new character into the collection at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The character you want to insert into the collection.</param>
            <param name="count">The number.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new string into the collection at the specified index.
            </summary>
            <param name="index">The index you want to insert.</param>
            <param name="s">The string you want to insert.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a serial of characters from the specified index, with the specified length.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="length">The length you want to remove.</param>
            <remarks>
            This method will be costly (move a lot of elements), so you shouldn't call this method usually.
            </remarks>
        </member>
        <member name="M:System.Text.ValueStringBuilder.RemoveFromEnd(System.Int32)">
            <summary>
            Removes the specified number of characters from the end of the collection.
            </summary>
            <param name="length">The number of characters you want to remove.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Clear">
            <summary>
            To clear the builder.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append(System.Char)">
            <summary>
            Append a character at the tail of the collection.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Append a serial of same characters into the collection.
            </summary>
            <param name="c">The character.</param>
            <param name="count">The number of the character you want to append.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append``1(``0)">
            <summary>
            Append a value.
            </summary>
            <typeparam name="TUnmanaged">The type of the value.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append(System.String)">
            <summary>
            Append a string into the collection.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append(System.Char*,System.Int32)">
            <summary>
            Append a string that is represented as a <see cref="T:System.Char"/>*.
            </summary>
            <param name="value">The string.</param>
            <param name="length">The length of the string.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Append(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Append a serial of characters.
            </summary>
            <param name="value">(<see langword="in"/> parameter) The characters.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine">
            <summary>
            Append a new line string.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine(System.Object)">
            <summary>
            Append a new line string through the specified unknown typed instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine(System.Char)">
            <summary>
            Append a character, and then apped a new line string.
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine(System.Char,System.Int32)">
            <summary>
            Append a series of same characters, whose length is specified
            as the argument <paramref name="count"/>.
            </summary>
            <param name="c">The character.</param>
            <param name="count">The number of characters.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine(System.Char*,System.Int32)">
            <summary>
            Append a string that represented as a pointer.
            </summary>
            <param name="s">The string.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine(System.String)">
            <summary>
            Append a string, and then append a new line.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLine``1(``0)">
            <summary>
            Append a string representation of a specified instance, and then append a new line.
            </summary>
            <typeparam name="TUnmanaged">The type of the instance.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendLineRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append a series of elements into the current collection.
            </summary>
            <typeparam name="T">The type of each element.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendRange``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Append a serial of strings from a serial of elements.
            </summary>
            <typeparam name="TUnmanaged">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="separator">The separator when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendRange``1(System.Collections.Generic.IEnumerable{``0},,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements.
            </summary>
            <typeparam name="TUnmanaged">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="converter">The converter.</param>
            <param name="separator">The separator when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendRange``1(``0*,System.Int32,System.String)">
            <summary>
            Append a serial of strings from a serial of elements specified as a pointer.
            </summary>
            <typeparam name="TUnmanaged">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="length">The length of the list.</param>
            <param name="separator">The separator when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendRange``1(``0*,System.Int32,,System.String)">
            <summary>
            Append a serial of strings converted from a serial of elements specified as a pointer.
            </summary>
            <typeparam name="TUnmanaged">The type of each element.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="length">The length of the list.</param>
            <param name="converter">The converter.</param>
            <param name="separator">The separator when an element is finished to append.</param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendSpan(System.Int32)">
            <summary>
            Append a span.
            </summary>
            <param name="length">The length of the characters.</param>
            <returns>The span.</returns>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Reverse">
            <summary>
            Reverse the string builder instance. For example, if the list holds a string <c>"Hello"</c>,
            after called this method, the string will be <c>"olleH"</c>.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AppendSlow(System.String)">
            <summary>
            Append a string.
            </summary>
            <param name="s">The string.</param>
        </member>
    </members>
</doc>
